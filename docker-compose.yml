services:
  postgres:
    image: postgres:16
    env_file: .env.postgres
    networks:
      - app-network
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - /var/lib/postgresql/16/production:/var/lib/postgresql/data

  minio:
    image: minio/minio
    command: server /data
    env_file: .env.minio
    networks:
      - app-network
    expose:
      - "9000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - /opt/minio/production:/data

  backend:
    image: ${DOCKERHUB_USERNAME}/${BACKEND_IMAGE}
    env_file: .env.backend
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    expose:
      - "8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 5s
      timeout: 3s
      retries: 10

  frontend:
    image: ${DOCKERHUB_USERNAME}/${FRONTEND_IMAGE}
    env_file: .env.frontend
    networks:
      - app-network
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "80:80"

networks:
  app-network:
    driver: bridge
